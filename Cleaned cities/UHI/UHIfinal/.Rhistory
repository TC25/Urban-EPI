z<-200;
#Inversion jump
Del<-2.3;
#Potential temperature gradient in free atmosphere
lamb<-.0033;
#Large-scale mean vertical velocity
w<--0.005;
#Mean potential temperature of boundary layer
Thetam<-281.1;
#Change in boundary layer height per time step
delz<-0;
#Change in inversion jump per time step
delDel<-0;
#Change in potential temperature of boundary layer per time step
delThetam<-0;
for(i in 1:36000) {
#Original Equation 11.63
H<-0.1*sin(3.14*(t(i)/3600)/12);
#Original Equation 11.36
Hz<--0.2*H;
#Original Equation 11.32
delThetam<-(H-Hz)/z;
#Original Equation 11.21
delz<-w-(Hz/Del);
#Original Equation 11.35
delDel<-lamb*(delz-w)-delThetam;
#Boundary layer height for next time step
z<-z+delz;
#Inversion jump for next time step
Del<-Del+delDel;
#Mean potential temperature of boundary layer for next time step
Thetam<-Thetam+delThetam;
#Create dataset for boundary layer height, mean potential temperature,
#and inversion jump
BLM2[i]<-z;
Theta1[i]<-Thetam;
Inv1[i]<-Del;
}
plot(t/3600, BLM2, t/3600, BLM1)
plot(BLM2,BLM1)
plot(t/3600,BLM1,type="l",col="red")
lines(t/3600,BLM2,col="green")
#time steps
t<-seq(36000);
BLM1<-seq(36000);
Theta1<-seq(36000);
Inv1<-seq(36000);
#Initial boundary layer height
z<-200;
#Inversion jump
Del<-2.3;
#Potential temperature gradient in free atmosphere
lamb<-.0033;
#Large-scale mean vertical velocity
w<-0;
#Mean potential temperature of boundary layer
Thetam<-281.1;
#Change in boundary layer height per time step
delz<-0;
#Change in inversion jump per time step
delDel<-0;
#Change in potential temperature of boundary layer per time step
delThetam<-0;
for(i in 1:36000) {
#Original Equation 11.63
H<-0.1*sin(3.14*(t(i)/3600)/12);
#Original Equation 11.36
Hz<--0.2*H;
#Original Equation 11.32
delThetam<-(H-Hz)/z;
#Original Equation 11.21
delz<-w-(Hz/Del);
#Original Equation 11.35
delDel<-lamb*(delz-w)-delThetam;
#Boundary layer height for next time step
z<-z+delz;
#Inversion jump for next time step
Del<-Del+delDel;
#Mean potential temperature of boundary layer for next time step
Thetam<-Thetam+delThetam;
#Create dataset for boundary layer height, mean potential temperature,
#and inversion jump
BLM1[i]<-z;
Theta1[i]<-Thetam;
Inv1[i]<-Del;
}
plot(t/3600,BLM1,type="l",col="red")
lines(t/3600,BLM2,col="green")
#time steps
t<-seq(36000);
BLM1<-seq(36000);
Theta1<-seq(36000);
Inv2<-seq(36000);
#Initial boundary layer height
z<-200;
#Inversion jump
Del<-2.3;
#Potential temperature gradient in free atmosphere
lamb<-.0033;
#Large-scale mean vertical velocity
w<--.005;
#Mean potential temperature of boundary layer
Thetam<-281.1;
#Change in boundary layer height per time step
delz<-0;
#Change in inversion jump per time step
delDel<-0;
#Change in potential temperature of boundary layer per time step
delThetam<-0;
for(i in 1:36000) {
#Original Equation 11.63
H<-0.1*sin(3.14*(t(i)/3600)/12);
#Original Equation 11.36
Hz<--0.2*H;
#Original Equation 11.32
delThetam<-(H-Hz)/z;
#Original Equation 11.21
delz<-w-(Hz/Del);
#Original Equation 11.35
delDel<-lamb*(delz-w)-delThetam;
#Boundary layer height for next time step
z<-z+delz;
#Inversion jump for next time step
Del<-Del+delDel;
#Mean potential temperature of boundary layer for next time step
Thetam<-Thetam+delThetam;
#Create dataset for boundary layer height, mean potential temperature,
#and inversion jump
BLM1[i]<-z;
Theta1[i]<-Thetam;
Inv2[i]<-Del;
}
plot(t/3600,Inv1,type="l",col="red")
lines(t/3600,Inv2,col="green")
clearPushBac
min(Inv1)
min(Inv2)
temp = list.files(pattern="*.csv")
setwd("D:\Yale important\Other\Data driven yale\Cleaned cities\UHI\UHIfinal")
setwd("D:/Yale important\Other/Data driven yale/Cleaned cities/UHI/UHIfinal")
temp = list.files(pattern="*.csv")
assign(temp[i], read.csv(temp[i]))
myfiles = lapply(temp, read.delim)
setwd("D:/Yale important\Other/Data driven yale/Cleaned cities/UHI/UHIfinal")
install.packages('raster')
x=[1:1:20]
x=c(1:1:20)
x=(1:1:20)
plot(X)
plot(x)
x=(1:1:20;5)
x=(1:1:20,5)
x=(1:1:20),5
for i=1:100
for i=1:100 {x(i)=(i)^2}
for (i=1:100) {x(i)=(i)^2}
for =(i=1:100) {x(i)=(i)^2}
df=data.frame(
lat=c(12,15,17,12),
lon=c(-35,-35,-32,-32),
id=c(1,2,3,4))
coordinates(id) = cbind(coords$lat, coords$lon)
coordinates(id) = cbind(lat$x, lon$y)
coords = data.frame(
x=rnorm(100),
y=rnorm(100)
)
str(coords)
plot(coords)
str(coords)
sp = SpatialPoints(coords)
str(sp)
sp = SpatialPoints(coords)
str(sp)
str(coords)
sp = SpatialPoints(coords)
str(sp)
data=data.frame(ID=1:100,group=letters[1:20])
head(data)
spdf = SpatialPointsDataFrame(coords, data)
spdf = SpatialPointsDataFrame(sp, data)
str(spdf)
coords = data.frame(
x=rnorm(100),
y=rnorm(100)
)
str(coords)
sp = SpatialPoints(coords)
coords = data.frame(
x=rnorm(100),
y=rnorm(100)
)
str(coords)
sp = SpatialPoints(coords)
sp = SpatialPoints(coords)
str(sp)
library(raster)
coords = data.frame(
x=rnorm(100),
y=rnorm(100)
)
str(coords)
sp = SpatialPoints(coords)
str(sp)
data=data.frame(ID=1:100,group=letters[1:20])
head(data)
spdf = SpatialPointsDataFrame(coords, data)
spdf = SpatialPointsDataFrame(sp, data)
str(spdf)
coordinates(data) = cbind(coords$x, coords$y)
str(spdf)
subset(spdf, group=="a")
df=data.frame(
lat=c(12,15,17,12),
lon=c(-35,-35,-32,-32),
id=c(1,2,3,4))
str(df)
sp = SpatialPoints(df)
str(sp)
data=data.frame(ID=1:100,group=letters[1:20])
head(data)
spdf = SpatialPointsDataFrame(coords, data)
spdf = SpatialPointsDataFrame(sp, data)
str(spdf)
coordinates(data) = cbind(df$x, df$y)
plot(sp)
data(meuse)
str(meuse)
data(meuse)
str(meuse)
View(meuse)
plot(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
library(raster)
data(meuse)
str(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
install.packages('ggplot2')
library(raster)
data(meuse)
str(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
library(ggplot2)
data(meuse)
str(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
install.packages('ggplot')
install.packages('ggplot2')
install.packages("ggplot2")
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
library(ggplot2)
data(meuse)
str(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
library(ggplot2)
data(meuse)
str(meuse)
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
library(ggplot2)
data(meuse)
str(meuse)
dev.off()
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
# Old Faithful Geyser Data on duration and waiting times.
library("MASS")
data(geyser)
m <- ggplot(geyser, aes(x = duration, y = waiting)) # define data
m + # reference the data
geom_point() +  # add points
stat_density2d(geom="contour") + # add a contour plot
xlim(0.5, 6) + ylim(40, 110) # define plot limits
getData("ISO3")%>%
as.data.frame%>%
filter(NAME=="South Africa")
za=getData('GADM', country='ZAF', level=1)
plot(za)
za@data
plot(za)
plot(za)
za=subset(za,NAME_1=="India")
plot(za)
za=subset(za,NAME_1=="IND")
plot(za)
x<-raster()
str(x)
x <- raster(ncol=36, nrow=18, xmn=-1000, xmx=1000, ymn=-100, ymx=900)
res(x)
r <- raster(ncol=10, nrow=10)
nCell(r)
ncell(r)
hasValues(r)
values(r) <- 1:ncell(r)
hasValues(r)
plot(r, main='Raster with 100 cells')
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
library(ggplot2)
data(meuse)
str(meuse)
dev.off()
coordinates(meuse) <- ~x+y
ggplot(as.data.frame(meuse),aes(x=x,y=y))+
geom_point(col="red")+
coord_equal()
# Old Faithful Geyser Data on duration and waiting times.
library("MASS")
data(geyser)
m <- ggplot(geyser, aes(x = duration, y = waiting)) # define data
m + # reference the data
geom_point() +  # add points
stat_density2d(geom="contour") + # add a contour plot
xlim(0.5, 6) + ylim(40, 110) # define plot limits
za=getData('GADM', country='ZAF', level=1)
plot(za)
za@data
za=subset(za,NAME_1=="IND")
plot(za)
x<-raster()
str(x)
x <- raster(ncol=36, nrow=18, xmn=-1000, xmx=1000, ymn=-100, ymx=900)
res(x)
r <- raster(ncol=10, nrow=10)
ncell(r)
hasValues(r)
values(r) <- 1:ncell(r)
hasValues(r)
plot(r, main='Raster with 100 cells')
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
install.packages('gplot')
install.packages('gplot2')
install.packages('rasterVis')
library(rasVis)
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
library(rasVis)
library(rasterVis)
gplot(r,maxpixels=50000)+ # reference the data
geom_raster(aes(fill=value)) # cell's data value determines its color
clim=getData('worldclim', var='bio', res=10)
plot(clim[[1:3]])
gplot(clim[[1:3]])+geom_raster(aes(fill=value))+
facet_wrap(~variable)+
scale_fill_gradientn(colours=c("brown","red","yellow","darkgreen","green"),trans="log10")+
coord_equal()
r1 <- crop(clim[[1]], extent(10,35,-35,-20))
## Crop using a Spatial polygon
r1 <- crop(clim[[1]], bbox(za))
plot(r1)
## aggregate using a function
aggregate(r1, 3, fun=mean) %>%
plot()
## aggregate using a function
aggregate(r1, 3, fun=mean)
plot()
## aggregate using a function
aggregate(r1, 3, fun=mean) %>%
plot()
install.packages('dplyr')
# variable gender with 20 "male" entries and
# 30 "female" entries
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
summary(gender)
#Set working directory
setwd("E:\Disk backup\Pen drive\Yale important\Courses\Xuhui Lee\Air pollution study")
#List all the csv files in directory
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)){
#Extract file name as a string and remove extension
#fname<-sub(pattern = "(.*)\\..*$", replacement = "\\1", basename(temp[i]))
#Assign the csv file to a variable
Input_f <- assign(temp[i], read.csv(temp[i]))
#x<-c(2, 4, 7, 9, 12, 14, 49, 52, 64)
#Input_f[x,]<-NULL
#Create a 4 column dataframe with the first 4 columns of the original csv
FIN <- data.frame(Input_f[,2:17])
#Set the names of each column
#colnames(FIN) <- c("Country", "Date", fname)
#Give the file the same names as the oiriginal input csv and overwrite it in the working directory
write.table (FIN, file = temp[i], sep = ",", dec =".",row.names = F)
}
#Set working directory
setwd("E:\Disk backup\Pen drive\Yale important\Courses\Xuhui Lee\Air pollution study")
#List all the csv files in directory
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)){
#Extract file name as a string and remove extension
#fname<-sub(pattern = "(.*)\\..*$", replacement = "\\1", basename(temp[i]))
#Assign the csv file to a variable
Input_f <- assign(temp[i], read.csv(temp[i]))
#x<-c(2, 4, 7, 9, 12, 14, 49, 52, 64)
#Input_f[x,]<-NULL
#Create a 4 column dataframe with the first 4 columns of the original csv
FIN <- data.frame(Input_f[,2:17])
#Set the names of each column
#colnames(FIN) <- c("Country", "Date", fname)
#Give the file the same names as the oiriginal input csv and overwrite it in the working directory
write.table (FIN, file = temp[i], sep = ",", dec =".",row.names = F)
}
#Set working directory
setwd("E:\Disk backup\Pen drive\Yale important\Courses\Xuhui Lee\Air pollution study")
#List all the csv files in directory
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)){
#Extract file name as a string and remove extension
#fname<-sub(pattern = "(.*)\\..*$", replacement = "\\1", basename(temp[i]))
#Assign the csv file to a variable
Input_f <- assign(temp[i], read.csv(temp[i]))
#x<-c(2, 4, 7, 9, 12, 14, 49, 52, 64)
#Input_f[x,]<-NULL
#Create a 4 column dataframe with the first 4 columns of the original csv
FIN <- data.frame(Input_f[,2:17])
#Set the names of each column
#colnames(FIN) <- c("Country", "Date", fname)
#Give the file the same names as the oiriginal input csv and overwrite it in the working directory
write.table (FIN, file = temp[i], sep = ",", dec =".",row.names = F)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
install.packages('CairoPDF')
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
source('E:/Disk backup/Pen drive/Yale important/Other/Data driven yale/Cleaned cities/UHI/UHIfinal/Summarizeandplot.R', echo=TRUE)
`devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
dev.on()
install.packages(devtools)
install.packages('devtools')
library(ggplot2)
library(extrafont)
library(Hmisc)
library(pastecs)
library(psych)
library(doBy)
library(lubridate)
library(tibble)
library(plyr)
library(tidyr)
library(Cairo)
library(UESIplots)
install.packages('Cairo')
`devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
install_github("https://github.com/datadrivenyale/UESIplots")`
install_github("https://github.com/datadrivenyale/UESIplots")`
library(devtools)
dev.on()
install_github("https://github.com/datadrivenyale/UESIplots")`
install.packages('devtools')
install.packages('devtools')
install_github("https://github.com/datadrivenyale/UESIplots")`
`devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
devtools::install_github("https://github.com/datadrivenyale/UESIplots")`
library(devtools)
install_github("https://github.com/datadrivenyale/UESIplots")`
library(devtools)
install.paackage*('devtools')
install.package('devtools')
install.packages('devtools')
library(devtools)
library(devtool)
R --version
install.packages(c('devtools','curl'))
library(devtool)
library(devtools)
install.packages("devtools.zip", repos = NULL)
dev_mode()
githubinstall("https://github.com/datadrivenyale/UESIplots")
devtools::install_github("datadrivenyale/UESIplots")
package.install('devtools')
install.packages('devtools')
